description: "A new Flutter project."
publish_to: 'none'
version: 1.0.0+1
environment:
  sdk: ^3.5.3
dependencies:
  flutter:
    sdk: flutter
  cupertino_icons: ^1.0.8
  ###
  flutter_bloc: ^8.1.6
  go_router: ^14.2.7
  shared_preferences: ^2.2.3
  flutter_svg: ^2.0.10+1
  intl: ^0.19.0
  cached_network_image: ^3.4.1
  hive: ^2.2.3
  hive_flutter: ^1.1.0
  connectivity_plus: ^6.0.5
  # dio: ^5.6.0
  ###
dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^4.0.0
flutter:
  uses-material-design: true
  assets:
    - assets/
    - assets/fonts/
    - assets/images/
  fonts:
    # SFProText
    - family: SFR
      fonts:
        - asset: assets/fonts/SFProText-Regular.ttf
    - family: SFM
      fonts:
        - asset: assets/fonts/SFProText-Medium.ttf
    - family: SFB
      fonts:
        - asset: assets/fonts/SFProText-Bold.ttf



WidgetsFlutterBinding.ensureInitialized();



context.read<>().add();



gradient: LinearGradient(
  begin: Alignment.topCenter,
  end: Alignment.bottomCenter,
  colors: [
    Color(0xff072434),
    Color(0xff0D0819),
  ],
),
boxShadow: [
  BoxShadow(
    color: AppColors.main,
    blurRadius: 10,
    spreadRadius: 0,
    offset: Offset(4, 0),
  )
],



flutter build apk --split-per-abi
<uses-permission android:name="android.permission.INTERNET"/>



&#x2007;
<key>NSPhotoLibraryUsageDescription</key>
<string>Your app needs access to the photo library to select photos.</string>



image_picker: ^1.1.2

ImagePicker picker = ImagePicker();
XFile image = XFile('');

void onPickImage() async {
  image = await pickImage();
  if (image.path.isNotEmpty) {
    controller4.text = image.path;
    checkActive();
  }
}

Future<XFile> pickImage() async {
  try {
    final image = await ImagePicker().pickImage(source: ImageSource.gallery);
    if (image == null) return XFile('');
    return image;
  } catch (e) {
    logger(e);
    return XFile('');
  }
}



final controller1 = TextEditingController();
final controller2 = TextEditingController();
final controller3 = TextEditingController();
final controller4 = TextEditingController();

bool active = false;

void checkActive() {
  setState(() {
    active = getButtonActive([
      controller1,
      controller2,
      controller3,
      controller4,
    ]);
  });
}

void onSave() {
  context.read<CafesBloc>().add();
  context.pop();
}

@override
void initState() {
  super.initState();
  controller1.text = widget.cafe.title;
  controller2.text = widget.cafe.location;
  controller3.text = widget.cafe.description;
  controller4.text = widget.cafe.image;
  image = XFile(widget.cafe.image);
}

@override
void dispose() {
  controller1.dispose();
  controller2.dispose();
  controller3.dispose();
  controller4.dispose();
  super.dispose();
}


// state
class TestLoadedState extends TestState {
  final List<TestModel> models;
  TestLoadedState({required this.models});
}

// event 
class GetTestEvent extends TestEvent {}

class AddTestEvent extends TestEvent {
  final TestModel model;
  AddTestEvent({required this.model});
}

class EditTestEvent extends TestEvent {
  final TestModel model;
  EditTestEvent({required this.model});
}

class DeleteTestEvent extends TestEvent {
  final int id;
  DeleteTestEvent({required this.id});
}

// bloc
on<GetTestEvent>((event, emit) async {
  await getModels();
  emit(TestLoadedState(models: DB.modelsList));
});

on<AddTestEvent>((event, emit) async {
  // DB.modelsList.insert(0, event.test);
  DB.modelsList.add(event.model);
  await updateModels();
  emit(TestLoadedState(models: DB.modelsList));
});

on<EditTestEvent>((event, emit) async {
  for (TestModel test in DB.modelsList) {
    if (test.id == event.model.id) {
      test.title = event.model.title;
    }
  }
  await updateModels();
  emit(TestLoadedState(models: DB.modelsList));
});

on<DeleteTestEvent>((event, emit) async {
  DB.modelsList.removeWhere((element) => element.id == event.id);
  await updateModels();
  emit(TestLoadedState(models: DB.modelsList));
});


class TestRepository {
  late Dio _dio;

  TestRepository() {
    final options = BaseOptions(
      // headers: {
      //   'Content-Type': 'application/json',
      //   'Authorization': 'Bearer $token',
      // },
      receiveDataWhenStatusError: true,
      connectTimeout: const Duration(seconds: 5),
      receiveTimeout: const Duration(seconds: 5),
    );

    _dio = Dio(options);
  }

  Future<List<Album>> fetchAlbums(String endpoint) async {
    try {
      final response = await _dio.get(endpoint);
      if (response.statusCode == 200) {
        final List result = response.data;
        final albums = result.map((item) {
          return Album.fromJson(item);
        }).toList();
        return albums;
      } else {
        return [];
      }
    } catch (e) {
      return [];
    }
  }

  Future<int?> addCategory(CategoryModel category) async {
    try {
      final response = await _dio.post(
        '',
        data: {
          'title': category.title.trim(),
          'index': int.parse(category.index),
          'type': int.parse(category.type),
        },
      );
      return response.statusCode!;
    } on DioException catch (e) {
      return e.response!.statusCode;
    } catch (e) {
      return null;
    }
  }

  Future<int?> updateCategory(CategoryModel category) async {
    try {
      final response = await _dio.put(
        '',
        data: {
          'id': category.id,
          'title': category.title.trim(),
          'index': int.parse(category.index),
          'type': int.parse(category.type),
        },
      );
      return response.statusCode!;
    } on DioException catch (e) {
      return e.response!.statusCode;
    } catch (e) {
      return null;
    }
  }

  Future<int?> deleteCategory(int id) async {
    try {
      final response = await _dio.delete('${''}$id');
      return response.statusCode!;
    } on DioException catch (e) {
      return e.response!.statusCode;
    } catch (e) {
      return null;
    }
  }
}


class Album {
  final int userId;
  final int id;
  final String title;

  Album({
    required this.userId,
    required this.id,
    required this.title,
  });

  factory Album.fromJson(Map<String, dynamic> json) {
    return Album(
      userId: json['userId'],
      id: json['id'],
      title: json['title'],
    );
  }
}


import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:pin_code_fields/pin_code_fields.dart';

// mask_text_input_formatter: ^2.9.0
// pin_code_fields: ^8.0.1

class PincodeField extends StatelessWidget {
  const PincodeField({
    super.key,
    required this.controller,
    required this.errorController,
    required this.onCompleted,
  });

  final TextEditingController controller;
  final StreamController<ErrorAnimationType> errorController;
  final void Function(String) onCompleted;

  @override
  Widget build(BuildContext context) {
    return PinCodeTextField(
      controller: controller,
      errorAnimationController: errorController,
      appContext: context,
      length: 4,
      animationType: AnimationType.fade,
      autoDisposeControllers: false,
      enableActiveFill: true,
      keyboardType: TextInputType.number,
      inputFormatters: [
        FilteringTextInputFormatter.digitsOnly,
      ],
      textStyle: const TextStyle(
        color: Colors.black,
        fontSize: 32,
        fontWeight: FontWeight.w500,
        fontFamily: 'MM',
      ),
      pinTheme: PinTheme(
        shape: PinCodeFieldShape.box,
        fieldHeight: 80,
        fieldWidth: 74,
        borderRadius: BorderRadius.circular(12),
        errorBorderColor: Colors.redAccent,
        activeFillColor: Colors.greenAccent,
        inactiveFillColor: Colors.greenAccent,
        selectedFillColor: Colors.greenAccent,
        activeColor: Colors.greenAccent,
        disabledColor: Colors.greenAccent,
        inactiveColor: Colors.greenAccent,
        selectedColor: Colors.greenAccent,
      ),
      onCompleted: onCompleted,
    );
  }
}
